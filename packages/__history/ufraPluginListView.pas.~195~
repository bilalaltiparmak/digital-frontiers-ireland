unit ufraPluginListView;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ufraListView, Vcl.ComCtrls,
  Vcl.ToolWin, JvExComCtrls, JvToolBar, Vcl.ActnList, Vcl.Menus, uDLLUtilsEx,
  uPluginUtilsEx;

type
  TfraPluginListView = class(TFrame)
    fraListView: TfraListView;
    OpenDialog: TOpenDialog;
    ActionList_Plugins: TActionList;
    actAddPlugin: TAction;
    N1: TMenuItem;
    actLoadPlugin: TAction;
    actUnloadPlugin: TAction;
    actLoadAll: TAction;
    actUnloadAll: TAction;
    procedure actAddPluginExecute(Sender: TObject);
    procedure PluginManagerUpdatingListItem(sender: TObject;
      var ListItem: TListItem; atIndex : integer);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

implementation

{$R *.dfm}


procedure TfraPluginListView.PluginManagerUpdatingListItem(sender: TObject;
  var ListItem: TListItem; atIndex : integer);
begin
if (TPluginObject(PluginManager.DLLList[atIndex]).IsLoaded) AND
   (TPluginObject(PluginManager.DLLList[atIndex]).IsValidPlugin) then
      Begin
      ListItem.Caption := TPluginObject(PluginManager.DLLList[atIndex]).GetListItemCaption(Self);
      End;


{if DLLObject.IsLoaded and DLLObject.IsValidPlugin then
   Begin
   ListItem.Caption := TPluginObject(PluginManager.DLLList[atIndex]).ListItemCaption;
   End;}
end;

procedure TfraPluginListView.actAddPluginExecute(Sender: TObject);
Var
  Files     : TStringList;
begin
Files := TStringList.Create;

if OpenDialog.Execute(Self.Handle) then
   Begin
   Files.Text := OpenDialog.Files.Text;
   PluginManager.AddDlls(Files);

 PluginManager.RefreshListView(self.fraListView.ListView, true);
   End;

FreeAndNil(Files);

//fraListView.actRefreshListView.Execute;


end;


end.
