unit uStubDllRequired;

interface
uses  uStubCommon, Classes, ComCtrls;

// TODO: Need to redesign the messaging system now that everything works here


        function stub_Initialize(Var InitData : TStub_InitObject) : boolean; export;
        function stub_Deinitalize() : boolean; export; stdcall
        FUNCTION stub_MessageIn(aMessage : String;  Var Handled : Boolean) : boolean export;
        FUNCTION stub_MessageInWithData( aMessage : String; Data : TObject;  Var Handled : Boolean) : boolean export;
        PROCEDURE stub_GetExportedFunctionNames(Sender : TObject; Var aStringList : TStringlist); export;
        FUNCTION stub_AskForListItemCaption(Sender : TObject) : string; export;
        FUNCTION stub_AskForGroupDetails(Sender : TObject) : TGroupInfoRec; export;



exports stub_Initialize,
        stub_Deinitalize,
        stub_MessageIn,
        stub_MessageInWithData,
        stub_GetExportedFunctionNames,
        stub_AskForGroupDetails,
        stub_AskForListItemCaption;

implementation
Var
  IsInitOk : boolean;


function stub_AskForListItemCaption(Sender : TObject) : string; export;
Begin
End;

FUNCTION stub_AskForGroupDetails(Sender : TObject) : TGroupInfoRec; export;
Begin
End;

PROCEDURE stub_GetExportedFunctionNames(Sender : TObject; Var aStringList : TStringlist);
Begin
if (Assigned(aStringList) = true) AND (IsInitOk = true) then
   Begin
     // return exported functions
   aStringList.Clear;
   // Add default required functions to the list
   aStringList.Add(FUNC_PREFIX_STUB + FUNC_Init);
   aStringList.Add(FUNC_PREFIX_STUB + FUNC_deinit);
   aStringList.Add(FUNC_PREFIX_STUB + FUNC_Message);
   aStringList.Add(FUNC_PREFIX_STUB + FUNC_MessageData);
   aStringList.Add(FUNC_PREFIX_STUB + FUNC_GetExportedFunctionNames);
   aStringList.Add(FUNC_PREFIX_STUB + FUNC_AskForGroupDetails);
   aStringList.Add(FUNC_PREFIX_STUB + FUNC_AskForListItemCaption);
   End;
End;


function stub_Initialize(Var InitData : TStub_InitObject) : boolean; export;
Begin
   IsInitOk := True;
   Result := True;
End;

function stub_Deinitalize() : boolean; export;
Begin
IsInitOk := False; // set to false so init can be called again
Result := True;
End;


FUNCTION stub_MessageIn( aMessage : String;  Var Handled : Boolean) : boolean export;
Begin
Handled := False;
Result := True;
End;

FUNCTION stub_MessageInWithData(aMessage : String; Data : TMessageParamRec;  Var Handled : Boolean) : boolean export;
Begin
Handled := False;
Result := True;
End;



initialization
  Begin
  IsInitOk := false;


  End;
finalization
  Begin
  if Assigned(dmStubDll) then dmStubDll.Free;

//  FreeAndNil(dmStubDll);
  End;



end.
